// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;
using System.Linq;
using MonoTouch.CoreLocation;
using MonoTouch.Foundation;
using MonoTouch.CoreData;
using MonoTouch.ObjCRuntime;
using MonoTouch.UIKit;
using WM;

namespace Photomania
{
	public partial class Photo : NSManagedObject
	{
        public static NSString ImageUrlKey = (NSString) "imageURL";
		public static NSString ThumbnailImageUrlKey = (NSString)"thumbnailImageURL";
		public static NSString TitleKey = (NSString)"title";
        public static NSString UniqueKey = (NSString) "unique";
		public static NSString LongitudeKey = (NSString)"longitude";
		public static NSString LatitudeKey = (NSString)"latitude";
		public static NSString SubtitleKey = (NSString)"subtitle";
        public static NSString WhoTookKey = (NSString) "whoTook";

		public Photo (IntPtr handle) : base (handle)
		{
		}

        public string ImageUrl  {
            get { return new NSString(ValueForKey(ImageUrlKey)); }
            set { SetValueForKey(value, ImageUrlKey); }
        }

		public string ThumbnailImageUrl
		{
			get { return new NSString(ValueForKey(ThumbnailImageUrlKey)); }
			set { SetValueForKey(value, ThumbnailImageUrlKey); }
		}

        public string Subtitle  {
			get { return new NSString(ValueForKey(SubtitleKey)); }
			set { SetValueForKey(value, SubtitleKey); }
        }

        public string Title  {
			get { return new NSString(ValueForKey(TitleKey)); }
			set { SetValueForKey(value, TitleKey); }
        }

        public string Unique  {
			get { return new NSString(ValueForKey(UniqueKey)); }
			set { SetValueForKey(value, UniqueKey); }
        }

		public double Longitude
		{
			get { return (double)new NSNumber(ValueForKey(LongitudeKey)); }
			set { SetValueForKey(new NSNumber(value), LongitudeKey); }
		}

		public double Latitude
		{
			get { return (double) new NSNumber(ValueForKey(LatitudeKey)); }
			set { SetValueForKey(new NSNumber(value), LatitudeKey); }
		}

		[Export("coordinate")]
		public CLLocationCoordinate2D Coordinate
		{
			get 
			{ 
				return new CLLocationCoordinate2D(Latitude, Longitude);
			}
		}

        public Photographer WhoTook  {
			get { return new Photographer(ValueForKey(WhoTookKey)); }
            set { SetValueForKey(value, WhoTookKey); }
        }

		void SetValueForKey(string value, NSString key)
		{
			base.SetValueForKey((NSString) (value??""), key);
		}

        public static Photo InsertNewObject(NSManagedObjectContext context)
        {
            return (Photo) NSEntityDescription.InsertNewObjectForEntityForName("Photo", context);
        }

        public UIImage Image => ImageFromString(ImageUrl);

		[Export("thumbnail")]
		public UIImage Thumbnail => ImageFromString(ThumbnailImageUrl);

		private UIImage ImageFromString(string url)
		{
			if (string.IsNullOrEmpty(url))
				return null;

			var imageData = NSData.FromUrl(new NSUrl(url));
			if (imageData == null)
				return null;
			return new UIImage(imageData);
		}

		public static Photo PhotoWithFlickrInfo(NSDictionary photoDictionary, NSManagedObjectContext context)
		{
			Photo photo = null;
    
			// Build a fetch request to see if we can find this Flickr photo in the database.
			// The "unique" attribute in Photo is Flickr's "id" which is guaranteed by Flickr to be unique.

			var request = new NSFetchRequest("Photo")
			{
				SortDescriptors = new[] {new NSSortDescriptor("title", true)},
				Predicate = NSPredicate.FromFormat("unique = %@",
					new NSObject[] {(NSString) photoDictionary[FlickrFetcher.FlickrPhotoId].Description})
			};

			// Execute the fetch
    
			NSError error ;
			var matches = context.ExecuteFetchRequest(request, out error);
    
			// Check what happened in the fetch
    
			if (matches==null || (matches.Length > 1)) {  // nil means fetch failed; more than one impossible (unique!)
				// handle error
			} else if (matches.Length == 0) { // none found, so let's create a Photo for that Flickr photo
				photo = InsertNewObject(context);
				photo.Unique = Desc(photoDictionary[FlickrFetcher.FlickrPhotoId]);
				photo.Title = Desc(photoDictionary[FlickrFetcher.FlickrPhotoTitle]);
				photo.Subtitle = Desc(photoDictionary[FlickrFetcher.FlickrPhotoDescription]);
				photo.Longitude = (double)(NSNumber)(photoDictionary[FlickrFetcher.FlickrPhotoDescription]);
				photo.Latitude = (double)(NSNumber)(photoDictionary[FlickrFetcher.FlickrPhotoDescription]);
				photo.ThumbnailImageUrl = FlickrFetcher.UrlForPhoto(photoDictionary, FlickrPhotoFormat.Square).AbsoluteString;
				photo.ImageUrl = FlickrFetcher.UrlForPhoto(photoDictionary, FlickrPhotoFormat.Large).AbsoluteString;
				var photographerName = Desc(photoDictionary[FlickrFetcher.FlickrPhotoOwner]);
				var photographer = Photographer.WithName(photographerName, context);
				photo.WhoTook = photographer;
			} else { // found the Photo, just return it from the list of matches (which there will only be one of)
				photo = (Photo)matches.Last();
			}
    
			return photo;			
		}

		static string Desc(NSObject obj)
		{
			return obj == null ? null : obj.Description;
		}
	}
}
