// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;
using System.Collections.Generic;
using System.Linq;
using MonoTouch.CoreFoundation;
using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace WM
{
	public partial class FlickerPhotoTVC : UITableViewController
	{
		public FlickerPhotoTVC(IntPtr handle) : base(handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			TableView.Source = new FlickerPhotoTVCSource { TVC = this };
			// Register the TableView's data source
			LoadLatestPhotosFromFlickr();
			RefreshControl.AddTarget(delegate
			{
				LoadLatestPhotosFromFlickr();
			}, UIControlEvent.ValueChanged);
		}

		void LoadLatestPhotosFromFlickr()
		{
			RefreshControl.BeginRefreshing();
			var queue = new DispatchQueue("");
			queue.DispatchAsync(() =>
			{
				var photos = FlickrFetcher.RecentGeoreferencedPhotos();
				DispatchQueue.MainQueue.DispatchAsync(() =>
				{
					Photos = photos.ToList<NSDictionary>();
					RefreshControl.EndRefreshing();
				});
			});
		}

		public override void AwakeFromNib()
        {
            base.AwakeFromNib();

            if (SplitViewController != null)
                SplitViewController.Delegate = new FlickerPhotoSVDelegate { TVC = this };
        }


        List<NSDictionary> _photos = new List<NSDictionary>();

        public List<NSDictionary> Photos
        {
            get{  return _photos; }
            set {
                _photos  = value;
                TableView.ReloadData();
            }
        }


        public string TitleForRow(int row)
        {
            return (NSString)Photos[row][FlickrFetcher.FlickrPhotoTitle].Description;
        }

        public string SubtitleForRow(int row)
        {
            return (NSString)Photos[row][FlickrFetcher.FlickrPhotoOwner].Description;
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            var tvc = (UITableViewCell) sender;
            var indexPath = TableView.IndexPathForCell(tvc);
            if (indexPath != null)
            {
                // if (seque.Identifier == "Show Image")
                var ivc = (ImageViewController) segue.DestinationViewController;
                var url = FlickrFetcher.UrlForPhoto(Photos[indexPath.Row], FlickrPhotoFormat.Large);
                ivc.ImageUrl = url;
	            ivc.Title = TitleForRow((indexPath.Row));

            }

        }


        public class FlickerPhotoSVDelegate :UISplitViewControllerDelegate
        {
            public FlickerPhotoTVC TVC;

            public override bool ShouldHideViewController(UISplitViewController svc, UIViewController viewController, UIInterfaceOrientation inOrientation)
            {

                return false;
            }

        }

        public class FlickerPhotoTVCSource : UITableViewSource
        {
            public FlickerPhotoTVC TVC;

            public FlickerPhotoTVCSource()
            {
            }
            
            public override int NumberOfSections(UITableView tableView)
            {
                // TODO: return the actual number of sections
                return 1;
            }
            
            public override int RowsInSection(UITableView tableview, int section)
            {
                // TODO: return the actual number of items in the section
                return TVC.Photos.Count;
            }
            
            public override string TitleForHeader(UITableView tableView, int section)
            {
                return null;
            }
            
            public override string TitleForFooter(UITableView tableView, int section)
            {
                return null;
            }
            
            public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
            {
                var cell = tableView.DequeueReusableCell(FlickrPhotoTVCCell.Key) as FlickrPhotoTVCCell;
                if (cell == null)
                    cell = new FlickrPhotoTVCCell();
                
                // TODO: populate the cell with the appropriate data based on the indexPath

                cell.TextLabel.Text = TVC.TitleForRow(indexPath.Row);
                cell.DetailTextLabel.Text = TVC.SubtitleForRow(indexPath.Row);
                
                return cell;
            }
        }
	}
}
