// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;
using System.Collections.Generic;
using System.Linq;
using MonoTouch.Foundation;
using MonoTouch.ObjCRuntime;
using MonoTouch.UIKit;
using SQLite;
using WM;

namespace Photomania
{
	public partial class Photo
	{
		[PrimaryKey, AutoIncrement]
		public int Id { get; set; }
		public string ImageUrl { get; set; }
		public string Subtitle { get; set; }
		public string Title { get; set; }
		public string Unique { get; set; }

		[Indexed]
		public int PhotographerId { get; set; }

		[Ignore]
		public Photographer WhoTook 
		{ 
			get;
			set;
		}

		[Ignore]
        public UIImage Image
        {
            get {
                if (string.IsNullOrEmpty(ImageUrl))
                    return null;

                var imageData = NSData.FromUrl(new NSUrl(ImageUrl));
                if (imageData == null)
                    return null;
                return new UIImage(imageData);
            }
        }

		public static Photo PhotoWithFlickrInfo(NSDictionary photoDictionary, Database database)
		{
			Photo photo = null;
    
			// Build a fetch request to see if we can find this Flickr photo in the database.
			// The "unique" attribute in Photo is Flickr's "id" which is guaranteed by Flickr to be unique.

			string d = photoDictionary[FlickrFetcher.FlickrPhotoId].Description;
			photo = database.Photos.Where(p => p.Unique == d).Take(1).FirstOrDefault();

			// Check what happened in the fetch
    
			if (photo == null) { // none found, so let's create a Photo for that Flickr photo
				photo = new Photo
				{
					Unique = Description(photoDictionary[FlickrFetcher.FlickrPhotoId]),
					Title = Description(photoDictionary[FlickrFetcher.FlickrPhotoTitle]),
					Subtitle = Description(photoDictionary[FlickrFetcher.FlickrPhotoDescription]),
					ImageUrl = FlickrFetcher.UrlForPhoto(photoDictionary, FlickrPhotoFormat.Large).AbsoluteString
				};

				var photographerName = Description(photoDictionary[FlickrFetcher.FlickrPhotoOwner]);
				var photographer = Photographer.WithName(photographerName, database);
				photo.PhotographerId = photographer.Id;
				database.Insert(photo);
			} 

			return photo;			
		}

		static string Description(NSObject obj)
		{
			return obj == null ? null : obj.Description;
		}

		public override string ToString()
		{
			return string.Format("[PhotoRec: Id={0}, title={1}]", Id, Title);
		}
	}
}
